# CNB 云原生构建配置文件
# 用于自动打包 Electron 应用（多平台）

# 全局配置
$:
  # Windows 部署事件（通过 Tag 部署页面触发）
  tag_deploy.windows:
    - name: deploy-windows
      docker:
        image: node:18
        volumes:
          - node_modules:copy-on-write
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: "false"
      stages:
        - name: 安装系统依赖
          script: |
            apt-get update
            apt-get install -y zip

        - name: 安装依赖
          script: npm ci

        - name: 构建前端
          script: npm run build:renderer

        - name: 构建主进程
          script: npm run build:main

        - name: 打包 Windows 应用
          script: |
            npx electron-builder --win --dir
            echo "=== 构建产物列表 ==="
            ls -lh build-output/

        - name: 压缩构建产物
          script: |
            cd build-output
            zip -r windows-build.zip win-unpacked/
            mv windows-build.zip ..
            cd ..
            echo "=== 压缩完成 ==="
            ls -lh windows-build.zip

        - name: 上传到 Release
          image: cnbcool/attachments:latest
          settings:
            tag: $TAG_NAME
            files:
              - windows-build.zip

  # Linux 部署事件（通过 Tag 部署页面触发）
  tag_deploy.linux:
    - name: deploy-linux
      docker:
        image: node:18
        volumes:
          - node_modules:copy-on-write
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: "false"
      stages:
        - name: 安装依赖
          script: npm ci

        - name: 构建前端
          script: npm run build:renderer

        - name: 构建主进程
          script: npm run build:main

        - name: 打包 Linux 应用
          script: npm run build:linux

        - name: 上传到 Release
          image: cnbcool/attachments:latest
          settings:
            tag: $TAG_NAME
            files:
              - build-output/*.AppImage
              - build-output/*.deb

  # 全平台部署事件（通过 Tag 部署页面触发）
  tag_deploy.all:
    - name: deploy-all-windows
      docker:
        image: node:18
        volumes:
          - node_modules:copy-on-write
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: "false"
      stages:
        - name: 安装系统依赖
          script: |
            apt-get update
            apt-get install -y zip

        - name: 安装依赖
          script: npm ci

        - name: 构建前端
          script: npm run build:renderer

        - name: 构建主进程
          script: npm run build:main

        - name: 打包 Windows 应用
          script: |
            npx electron-builder --win --dir
            echo "=== 构建产物列表 ==="
            ls -lh build-output/

        - name: 压缩构建产物
          script: |
            cd build-output
            zip -r windows-build.zip win-unpacked/
            mv windows-build.zip ..
            cd ..
            echo "=== 压缩完成 ==="
            ls -lh windows-build.zip

        - name: 上传 Windows 产物到 Release
          image: cnbcool/attachments:latest
          settings:
            tag: $TAG_NAME
            files:
              - windows-build.zip

    - name: deploy-all-linux
      docker:
        image: node:18
        volumes:
          - node_modules:copy-on-write
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: "false"
      stages:
        - name: 安装依赖
          script: npm ci

        - name: 构建前端
          script: npm run build:renderer

        - name: 构建主进程
          script: npm run build:main

        - name: 打包 Linux 应用
          script: npm run build:linux

        - name: 上传 Linux 产物到 Release
          image: cnbcool/attachments:latest
          settings:
            tag: $TAG_NAME
            files:
              - build-output/*.AppImage
              - build-output/*.deb

# 分支名
main:
  # 事件：代码推送时触发（仅做代码检查，不构建）
  push:
    - name: code-check
      docker:
        image: node:18
        volumes:
          - node_modules:copy-on-write
      stages:
        - name: 安装依赖
          script: npm ci

        - name: 代码检查
          script: |
            echo "✅ 代码检查通过"
            echo "💡 提示：创建 Tag 后，在【部署】页面选择环境进行部署"

