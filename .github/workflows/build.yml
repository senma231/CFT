name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build renderer
        run: npm run build:renderer

      - name: Build Windows app
        run: |
          echo "=== Building Windows app with icon ==="
          echo "Icon file exists:"
          if (Test-Path "assets/icons/icon.ico") {
            Write-Host "✓ Icon file found" -ForegroundColor Green
            Get-Item "assets/icons/icon.ico" | Select-Object Name, Length
          } else {
            Write-Host "✗ Icon file NOT found" -ForegroundColor Red
          }
          npx electron-builder --win --x64
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          DEBUG: electron-builder

      - name: List build output
        run: |
          echo "=== Build output ==="
          dir build-output
          echo "=== win-unpacked content ==="
          dir build-output\win-unpacked
          echo "=== Checking EXE files ==="
          Get-ChildItem "build-output\win-unpacked" -Filter "*.exe" | ForEach-Object {
            Write-Host "Found EXE: $($_.Name)" -ForegroundColor Green
            Write-Host "  Size: $([math]::Round($_.Length / 1MB, 2)) MB"
          }
          echo "=== Checking if CloudflareTunnelManager.exe exists ==="
          if (Test-Path "build-output\win-unpacked\CloudflareTunnelManager.exe") {
            Write-Host "✓ CloudflareTunnelManager.exe found" -ForegroundColor Green
          } elseif (Test-Path "build-output\win-unpacked\Cloudflare隧道管理器.exe") {
            Write-Host "✓ Cloudflare隧道管理器.exe found" -ForegroundColor Green
          } else {
            Write-Host "✗ EXE file NOT found" -ForegroundColor Red
          }

      - name: Compress Windows build
        run: |
          cd build-output\win-unpacked
          Compress-Archive -Path * -DestinationPath ..\..\CFT_windows_x64.zip

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: CFT_windows_x64
          path: CFT_windows_x64.zip
          retention-days: 7

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build renderer
        run: npm run build:renderer

      - name: Build Linux app
        run: npx electron-builder --linux --x64
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: List build output
        run: |
          echo "=== Build output ==="
          ls -lh build-output/

      - name: Rename Linux artifacts
        run: |
          cd build-output
          # Rename AppImage
          if ls *.AppImage 1> /dev/null 2>&1; then
            for file in *.AppImage; do
              mv "$file" "CFT_linux_x64.AppImage"
              echo "✓ Renamed to CFT_linux_x64.AppImage"
            done
          fi
          # Rename deb
          if ls *.deb 1> /dev/null 2>&1; then
            for file in *.deb; do
              mv "$file" "CFT_linux_x64.deb"
              echo "✓ Renamed to CFT_linux_x64.deb"
            done
          fi
          ls -lh

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CFT_linux_x64
          path: |
            build-output/CFT_linux_x64.AppImage
            build-output/CFT_linux_x64.deb
          retention-days: 7

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: CFT_windows_x64

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: CFT_linux_x64

      - name: List downloaded files
        run: |
          echo "=== Downloaded artifacts ==="
          ls -lh

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            CFT_windows_x64.zip
            CFT_linux_x64.AppImage
            CFT_linux_x64.deb
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

